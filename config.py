from classes import EmojiModes


def initialize_config(file):
    """Ничего не возвращает.
    Принимает файл, проходит по всем строкам и пытается записать найденные параметры в словарь, попутно сортируя по категориям.
    Инструкция по использованию находится непосредственно в файле конфига.
    """
    global config
    _config = {}
    # Глубина словаря. Значение заменяет место, куда записываются переменные: так из {<место записи>} можно перейти на {"Роли": {<место записи>}} при необходимости.
    _level = _config    # Работает как указатель, кстати.
    with open(file, "r", encoding="utf-8-sig") as file:    # keyword параметры пишутся слитно с пробелом.
        for line in file.readlines():
            print(f"Читаю строку: \"{line.removesuffix("\n")}\".")

            # Является ли строка комментарием.
            if line.startswith("#"):
                print("- Строка является комментарием.")
                print("\t")
                continue

            # Объявляет ли строка переменную.
            elif " = " in line:
                print("- Строка объявляет переменную.")
                line = line.split(" = ")    # Делит строку на название переменной и её значение; защита от дурака не предусмотрена.
                name = line[0]
                print("- Имя её —", name+".")
                value = line[1].removesuffix("\n")
                print("- А значение —", value+".")
                # Преобразовать значение в число, если возможно.
                try:
                    value = int(value)

                # Не число.
                except ValueError:
                    print("- И числом она не является.")

                    # Если значение не является числом и не объявляется как строка, то, либо это enum, либо кодер ♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥.
                    if value[0] not in ["\"", "\'"] and "." in value:    # Если первый символ не является кавычками и значение имеет точку.
                        print("- И строкой тоже. Значит, enum.")

                        # Пока enum в конфиге один, потому только его и ожидаем.
                        # Пройтись по аттрибутам EmojiModes.
                        print("- Прохожусь по аттрибутам Emojimodes:")
                        for mode in EmojiModes:
                            print(f"  - {mode}")
                            # Если значение совпадает с названием аттрибута, заменяем значение на аттрибут.
                            if value.split(".")[1] == mode.name:
                                print("    - Значение совпадает с данным именем. Заменяем его на аттрибут.")
                                value = mode
                                break

                    else:    # Если строка или bool.
                        if value == "True":
                            value = True

                        elif value == "False":
                            value = False

                        else:
                            value = value.removeprefix("\"").removesuffix("\"")   # Убираю кавычки из строки. Кавычки у нас по конвенции, не полноценный компилятор делаю же.

                print("Записываем.")
                _level[name] = value
                print(f"=== Текущий вид словаря: {_config}. Вид _level: {_level}.")
                print("\t")
                continue

            # Объявляет ли строка категорию имён.
            elif ":" in line:
                print("- Строка объявляет категорию имён.")
                _level = dict()    # Переназначение _level на пустой словарь.
                _config[line.removesuffix(":\n")] = _level    # Вкладывание _level внутрь конфига.
                print(f"=== _level перенесён. Текущий вид словаря: {_config}")
            print("\t")
    config = _config

config = dict()


# Debug-версия:
# def initialize_config(file):
#     """Возвращает словарь формата {"Опции": {}, "Роли": {}, "Каналы": {}}
#     Принимает файл, проходит по всем строкам и пытается записать найденные параметры в словарь, попутно сортируя по категориям.
#     Инструкция по использованию находится непосредственно в файле конфига.
#     """
#     config = {}
#     # Глубина словаря. Значение заменяет место, куда записываются переменные: так из {<место записи>} можно перейти на {"Роли": {<место записи>}} при необходимости.
#     _level = config    # Работает как указатель, кстати.
#     with open(file, "r", encoding="utf-8-sig") as file:    # keyword параметры пишутся слитно с пробелом.
#         for line in file.readlines():
#             print(f"Читаю строку: \"{line.removesuffix("\n")}\".")
#
#             # Является ли строка комментарием.
#             if line.startswith("#"):
#                 print("- Строка является комментарием.")
#                 print("\t")
#                 continue
#
#             # Объявляет ли строка переменную.
#             elif " = " in line:
#                 print("- Строка объявляет переменную.")
#                 line = line.split(" = ")    # Делит строку на название переменной и её значение; защита от дурака не предусмотрена.
#                 name = line[0]
#                 print("- Имя её —", name+".")
#                 value = line[1].removesuffix("\n")
#                 print("- А значение —", value+".")
#                 # Преобразовать значение в число, если возможно.
#                 try:
#                     value = int(value)
#
#                 # Не число.
#                 except ValueError:
#                     print("- И числом она не является.")
#
#                     # Если значение не является числом и не объявляется как строка, то, либо это enum, либо кодер ♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥.
#                     if value[0] not in ["\"", "\'"] and "." in value:    # Если первый символ не является кавычками и значение имеет точку.
#                         print("- И строкой тоже. Значит, enum.")
#
#                         # Пока enum в конфиге один, потому только его и ожидаем.
#                         # Пройтись по аттрибутам EmojiModes.
#                         print("- Прохожусь по аттрибутам Emojimodes:")
#                         for mode in EmojiModes:
#                             print(f"  - {mode}")
#                             # Если значение совпадает с названием аттрибута, заменяем значение на аттрибут.
#                             if value.split(".")[1] == mode.name:
#                                 print("    - Значение совпадает с данным именем. Заменяем его на аттрибут.")
#                                 value = mode
#                                 break
#
#                     else:    # Если строка или bool.
#                         if value == "True":
#                             value = True
#
#                         elif value == "False":
#                             value = False
#
#                         else:
#                             value = value.removeprefix("\"").removesuffix("\"")   # Убираю кавычки из строки. Кавычки у нас по конвенции, не полноценный компилятор делаю же.
#
#                 print("Записываем.")
#                 _level[name] = value
#                 print(f"=== Текущий вид словаря: {config}. Вид _level: {_level}.")
#                 print("\t")
#                 continue
#
#             # Объявляет ли строка категорию имён.
#             elif ":" in line:
#                 print("- Строка объявляет категорию имён.")
#                 _level = dict()    # Переназначение _level на пустой словарь.
#                 config[line.removesuffix(":\n")] = _level    # Вкладывание _level внутрь конфига.
#                 print(f"=== _level перенесён. Текущий вид словаря: {config}")
#             print("\t")
#     return config
#
# print("=== Конечный вид конфига:", initialize_config("config.txt"))